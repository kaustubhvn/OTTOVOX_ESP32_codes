#include <WiFi.h>
#include <HTTPClient.h>
#include <FS.h>
#include <SPIFFS.h>
#include <WiFiClientSecure.h>

// Wi-Fi Credentials
const char* ssid = "OTTO";
const char* password = "12345678";

// Deepgram API Credentials
const char* deepgramHost = "api.deepgram.com";
const char* deepgramPath = "/v1/listen?model=nova-2&smart_format=true";
const String deepgramApiKey = "9fc68b4a4932f146e2009143ef8f2ee0d3f57cbb";

// Gemini API Credentials
const String apiKey = "AIzaSyD51z_HiybRKdNpRw3zou89eN-Rfz_dQ1A";
const String apiURL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=" + apiKey;

// File path for audio
const char* mp3FilePath = "/audio.mp3";

// Global variable for the transcript
String transcript = "";

void setup() {
  Serial.begin(115200);

  // Initialize SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("Failed to mount SPIFFS");
    return;
  }

  // Connect to Wi-Fi
  Serial.println("Connecting to Wi-Fi...");
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println("\nConnected to Wi-Fi!");
  Serial.println("IP Address: " + WiFi.localIP().toString());
}

void sendAudioFileToDeepgram() {
  WiFiClientSecure client;
  client.setInsecure(); // Use with caution for testing purposes

  if (!client.connect(deepgramHost, 443)) {
    Serial.println("Failed to connect to Deepgram");
    return;
  }

  File audioFile = SPIFFS.open(mp3FilePath, "r");
  if (!audioFile) {
    Serial.println("Failed to open audio file");
    return;
  }

  int audioFileSize = audioFile.size();
  String request = String("POST ") + deepgramPath + " HTTP/1.1\r\n" +
                   "Host: " + deepgramHost + "\r\n" +
                   "Authorization: Token " + deepgramApiKey + "\r\n" +
                   "Content-Type: audio/mpeg\r\n" +
                   "Content-Length: " + String(audioFileSize) + "\r\n\r\n";

  client.print(request);

  uint8_t buffer[1024];
  while (audioFile.available()) {
    size_t bytesRead = audioFile.read(buffer, sizeof(buffer));
    client.write(buffer, bytesRead);
  }
  audioFile.close();

  processDeepgramResponse(client);
  client.stop();
}

void processDeepgramResponse(WiFiClientSecure &client) {
  String responseBody = "";

  while (client.connected() || client.available()) {
    responseBody += client.readStringUntil('\n');
  }

  int startIndex = responseBody.indexOf("\"transcript\":\"");
  if (startIndex != -1) {
    startIndex += 14;
    int endIndex = responseBody.indexOf("\"", startIndex);
    if (endIndex != -1) {
      transcript = responseBody.substring(startIndex, endIndex);
      Serial.println("Transcription: " + transcript);
    } else {
      Serial.println("Transcript end not found");
    }
  } else {
    Serial.println("Transcript not found in response");
  }
}

void geminiii() {
  if (transcript.length() > 0) {
    Serial.println("Sending transcript to Gemini API: " + transcript);

    if (WiFi.status() == WL_CONNECTED) {
      HTTPClient http;
      http.begin(apiURL);
      http.addHeader("Content-Type", "application/json");

      String payload = "{";
      payload += "\"contents\": [{";
      payload += "\"parts\": [{";
      payload += "\"text\": \"" + transcript + "\"";
      payload += "}]}]}";

      int httpResponseCode = http.POST(payload);
      if (httpResponseCode > 0) {
        String response = http.getString();
        Serial.println("Response from Gemini API: " + response);
      } else {
        Serial.println("HTTP request failed. Code: " + String(httpResponseCode));
      }
      http.end();
    } else {
      Serial.println("Wi-Fi not connected");
    }
  } else {
    Serial.println("No transcript available");
  }
}

void loop() {
  sendAudioFileToDeepgram();
  geminiii();
  delay(30000); // Wait 30 seconds before sending again
}
