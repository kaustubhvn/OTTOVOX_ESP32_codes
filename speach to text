#include <WiFi.h>
#include <WiFiClientSecure.h>
#include <FS.h>
#include <SPIFFS.h>

String sttresponse = "";

const char* ssid = "OTTO";          // Wi-Fi SSID
const char* password = "123456789";  // Wi-Fi Password

const char* deepgramHost = "api.deepgram.com";
const char* deepgramPath = "/v1/listen?model=nova-2&smart_format=true";
const String deepgramApiKey = "9fc68b4a4932f146e2009143ef8f2ee0d3f57cbb";

const char* mp3FilePath = "/audio.mp3"; // Path to the MP3 file in SPIFFS

void setup() {
  Serial.begin(115200);
  if (!SPIFFS.begin(true)) {
    Serial.println("An Error has occurred while mounting SPIFFS");
    return;
  }

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");

  // Send the audio file to Deepgram
  sendAudioFileToDeepgram();
}

void loop() {
  // Nothing to do here
}

void sendAudioFileToDeepgram() {
  WiFiClientSecure client;
  client.setInsecure(); // Use with caution; for testing purposes only

  if (!client.connect(deepgramHost, 443)) {
    Serial.println("Connection to Deepgram failed!");
    return;
  }

  File audioFile = SPIFFS.open(mp3FilePath, "r");
  if (!audioFile) {
    Serial.println("Failed to open audio file");
    return;
  }

  int audioFileSize = audioFile.size();

  // Construct HTTP POST request headers
  String request = String("POST ") + deepgramPath + " HTTP/1.1\r\n" +
                   "Host: " + deepgramHost + "\r\n" +
                   "Authorization: Token " + deepgramApiKey + "\r\n" +
                   "Content-Type: audio/mpeg\r\n" +
                   "Content-Length: " + String(audioFileSize) + "\r\n" +
                   "\r\n";

  // Send the HTTP request headers
  client.print(request);

  // Send the audio file content in 1 KB chunks
  const size_t chunkSize = 1024;
  uint8_t buffer[chunkSize];
  size_t totalBytesSent = 0;
  int chunkCount = 0;

  while (audioFile.available()) {
    size_t bytesRead = audioFile.read(buffer, sizeof(buffer));
    client.write(buffer, bytesRead);
    totalBytesSent += bytesRead;
    chunkCount++;
    Serial.printf("Chunk %d sent: %d bytes\n", chunkCount, bytesRead);
  }

  audioFile.close();
  Serial.printf("Total bytes sent: %d\n", totalBytesSent);

  // Process the response from Deepgram
  processDeepgramResponse(client);
  client.stop();
}

void processDeepgramResponse(WiFiClientSecure &client) {
  String responseBody = "";

  while (client.connected() || client.available()) {
    String line = client.readStringUntil('\n');
    responseBody += line + '\n';
  }

  // Serial.println("Full response from Deepgram:");
  // Serial.println(responseBody);

  int transcriptStart = responseBody.indexOf("\"transcript\":\"");
  if (transcriptStart == -1) {
    Serial.println("Error: 'transcript' not found in the response.");
    return;
  }

  transcriptStart += 14;
  int transcriptEnd = responseBody.indexOf("\"", transcriptStart);
  if (transcriptEnd == -1) {
    Serial.println("Error: End of 'transcript' not found.");
    return;
  }

  String sttresponse = responseBody.substring(transcriptStart, transcriptEnd);
  Serial.println("Transcription: " + sttresponse);
}
